@page "/pruebas"
@using EtapaDeJuicio.Domain.Entities.Pruebas
@using EtapaDeJuicio.UI.Web.Services
@using EtapaDeJuicio.UI.Web.Models
@inject PruebaDocumentalService PruebaDocumentalService
@inject PruebaTestimonialService PruebaTestimonialService
@inject PruebaPericialesService PruebaPericialesService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime

<PageTitle>Gesti√≥n de Pruebas</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>üìã Gesti√≥n de Pruebas</h1>
                <div class="btn-group">
                    <button class="btn btn-warning dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <span class="oi oi-plus" aria-hidden="true"></span> Nueva Prueba
                    </button>                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" @onclick='() => ShowCreateModal("Documental")'>üìÑ Prueba Documental</a></li>
                        <li><a class="dropdown-item" href="#" @onclick='() => ShowCreateModal("Testimonial")'>üë• Prueba Testimonial</a></li>
                        <li><a class="dropdown-item" href="#" @onclick='() => ShowCreateModal("Pericial")'>üî¨ Prueba Pericial</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="row mb-4">
        <div class="col-md-4">
            <select class="form-select" @onchange="FilterByType">
                <option value="">Todos los tipos</option>
                <option value="Documental">Documentales</option>
                <option value="Testimonial">Testimoniales</option>
                <option value="Pericial">Periciales</option>
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @onchange="FilterByStatus">
                <option value="">Todos los estados</option>
                <option value="V√°lida">V√°lida</option>
                <option value="Inv√°lida">Inv√°lida</option>
            </select>
        </div>
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Buscar por descripci√≥n..." @oninput="FilterByDescription" />
        </div>
    </div>

    @if (loading)
    {
        <div class="text-center">
            <div class="spinner-border text-warning" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p>Cargando pruebas...</p>
        </div>
    }
    else if (filteredPruebas == null || !filteredPruebas.Any())
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">No hay pruebas registradas</h4>
            <p>No se encontraron pruebas en el sistema. ¬°Crea la primera prueba!</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var prueba in filteredPruebas)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 border-warning">
                        <div class="card-header bg-warning text-dark">
                            <h5 class="card-title mb-0">
                                @GetPruebaIcon(prueba.TipoPrueba) @prueba.TipoPrueba
                            </h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text">
                                <strong>üìù Descripci√≥n:</strong> @(prueba.Descripcion ?? "Sin descripci√≥n")<br>
                                <strong>üìÖ Fecha:</strong> @prueba.FechaPresentacion.ToString("dd/MM/yyyy")<br>
                                <strong>‚öñÔ∏è Audiencia:</strong> @prueba.AudienciaId<br>
                                <strong>üìä Estado:</strong> <span class="badge @GetStatusBadgeClass(prueba.Estado)">@prueba.Estado</span>
                            </p>
                            @if (!string.IsNullOrEmpty(prueba.Observaciones))
                            {
                                <p class="card-text"><small class="text-muted">@prueba.Observaciones</small></p>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="btn-group w-100" role="group">
                                <button class="btn btn-outline-warning btn-sm" @onclick="() => ViewPrueba(prueba)">
                                    <span class="oi oi-eye" aria-hidden="true"></span> Ver
                                </button>
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => EditPrueba(prueba)">
                                    <span class="oi oi-pencil" aria-hidden="true"></span> Editar
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeletePrueba(prueba.Id)">
                                    <span class="oi oi-trash" aria-hidden="true"></span> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Modal para crear/editar prueba -->
<div class="modal fade" id="pruebaModal" tabindex="-1" aria-labelledby="pruebaModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="pruebaModalLabel">
                    @if (isEditing)
                    {
                        <span>‚úèÔ∏è Editar Prueba</span>
                    }
                    else
                    {
                        <span>‚ûï Nueva Prueba @currentPrueba.TipoPrueba</span>
                    }
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form @onsubmit="SavePrueba" @onsubmit:preventDefault="true">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="tipoPrueba" class="form-label">Tipo de Prueba</label>
                            <select class="form-select" id="tipoPrueba" @bind="currentPrueba.TipoPrueba" required disabled="@isEditing">
                                <option value="">Seleccionar tipo</option>
                                <option value="Documental">Documental</option>
                                <option value="Testimonial">Testimonial</option>
                                <option value="Pericial">Pericial</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="audienciaId" class="form-label">ID de Audiencia</label>
                            <input type="text" class="form-control" id="audienciaId" @bind="audienciaIdString" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="descripcion" class="form-label">Descripci√≥n</label>
                        <textarea class="form-control" id="descripcion" rows="3" @bind="currentPrueba.Descripcion" required></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="fechaPresentacion" class="form-label">Fecha de Presentaci√≥n</label>
                            <input type="date" class="form-control" id="fechaPresentacion" @bind="currentPrueba.FechaPresentacion" required>
                        </div>
                        <div class="col-md-6">
                            <label for="estado" class="form-label">Estado</label>
                            <select class="form-select" id="estado" @bind="currentPrueba.Estado" required>
                                <option value="">Seleccionar estado</option>
                                <option value="V√°lida">V√°lida</option>
                                <option value="Inv√°lida">Inv√°lida</option>
                            </select>
                        </div>
                    </div>

                    <!-- Campos espec√≠ficos seg√∫n el tipo de prueba -->
                    @if (currentPrueba.TipoPrueba == "Documental")
                    {
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <label for="rutaArchivo" class="form-label">Ruta del Archivo</label>
                                <input type="text" class="form-control" id="rutaArchivo" @bind="currentPrueba.RutaArchivo">
                            </div>
                            <div class="col-md-6">
                                <label for="tipoDocumento" class="form-label">Tipo de Documento</label>
                                <input type="text" class="form-control" id="tipoDocumento" @bind="currentPrueba.TipoDocumento">
                            </div>
                        </div>
                    }
                    else if (currentPrueba.TipoPrueba == "Testimonial")
                    {
                        <div class="mt-3">
                            <label for="nombreTestigo" class="form-label">Nombre del Testigo</label>
                            <input type="text" class="form-control" id="nombreTestigo" @bind="currentPrueba.NombreTestigo">
                        </div>
                    }
                    else if (currentPrueba.TipoPrueba == "Pericial")
                    {
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <label for="tipoPericia" class="form-label">Tipo de Pericia</label>
                                <input type="text" class="form-control" id="tipoPericia" @bind="currentPrueba.TipoPericia">
                            </div>
                            <div class="col-md-6">
                                <label for="nombrePerito" class="form-label">Nombre del Perito</label>
                                <input type="text" class="form-control" id="nombrePerito" @bind="currentPrueba.NombrePerito">
                            </div>
                        </div>
                    }

                    <div class="mt-3">
                        <label for="observaciones" class="form-label">Observaciones</label>
                        <textarea class="form-control" id="observaciones" rows="2" @bind="currentPrueba.Observaciones"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-warning">
                        @if (isEditing)
                        {
                            <span>üíæ Actualizar</span>
                        }
                        else
                        {
                            <span>üíæ Crear</span>
                        }
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal para ver detalles de la prueba -->
<div class="modal fade" id="viewPruebaModal" tabindex="-1" aria-labelledby="viewPruebaModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewPruebaModalLabel">
                    üëÅÔ∏è Detalles de la Prueba
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (viewingPrueba != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <h6>@GetPruebaIcon(viewingPrueba.TipoPrueba) Tipo de Prueba</h6>
                            <p class="mb-2">@viewingPrueba.TipoPrueba</p>
                            <h6>üìä Estado</h6>
                            <span class="badge @GetStatusBadgeClass(viewingPrueba.Estado)">@viewingPrueba.Estado</span>
                        </div>
                        <div class="col-md-6">
                            <h6>‚öñÔ∏è Audiencia</h6>
                            <p class="mb-2">@viewingPrueba.AudienciaId</p>
                            <h6>üìÖ Fecha de Presentaci√≥n</h6>
                            <p class="mb-2">@viewingPrueba.FechaPresentacion.ToString("dd/MM/yyyy")</p>
                        </div>
                    </div>
                    <h6>üìù Descripci√≥n</h6>
                    <p class="mb-3">@viewingPrueba.Descripcion</p>

                    @if (!string.IsNullOrEmpty(viewingPrueba.Observaciones))
                    {
                        <h6>üìå Observaciones</h6>
                        <p class="mb-2">@viewingPrueba.Observaciones</p>
                    }

                    <!-- Detalles espec√≠ficos seg√∫n el tipo -->
                    @if (viewingPrueba.TipoPrueba == "Documental")
                    {
                        <hr>
                        <h6>üìÑ Detalles del Documento</h6>
                        @if (!string.IsNullOrEmpty(viewingPrueba.RutaArchivo))
                        {
                            <p><strong>Archivo:</strong> @viewingPrueba.RutaArchivo</p>
                        }
                        @if (!string.IsNullOrEmpty(viewingPrueba.TipoDocumento))
                        {
                            <p><strong>Tipo:</strong> @viewingPrueba.TipoDocumento</p>
                        }
                    }
                    else if (viewingPrueba.TipoPrueba == "Testimonial")
                    {
                        <hr>
                        <h6>üë• Detalles del Testimonio</h6>
                        @if (!string.IsNullOrEmpty(viewingPrueba.NombreTestigo))
                        {
                            <p><strong>Testigo:</strong> @viewingPrueba.NombreTestigo</p>
                        }
                    }
                    else if (viewingPrueba.TipoPrueba == "Pericial")
                    {
                        <hr>
                        <h6>üî¨ Detalles de la Pericia</h6>
                        @if (!string.IsNullOrEmpty(viewingPrueba.TipoPericia))
                        {
                            <p><strong>Tipo de Pericia:</strong> @viewingPrueba.TipoPericia</p>
                        }
                        @if (!string.IsNullOrEmpty(viewingPrueba.NombrePerito))
                        {
                            <p><strong>Perito:</strong> @viewingPrueba.NombrePerito</p>
                        }
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<PruebaDto> pruebas = new List<PruebaDto>();
    private List<PruebaDto> filteredPruebas = new List<PruebaDto>();
    private PruebaDto currentPrueba = new PruebaDto();
    private PruebaDto? viewingPrueba;
    private bool loading = true;
    private bool isEditing = false;
    private string selectedType = "";
    private string selectedStatus = "";
    private string searchDescription = "";
    private string audienciaIdString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPruebas();
    }

    private async Task LoadPruebas()
    {
        try
        {
            loading = true;
            var allPruebas = new List<PruebaDto>();

            // Cargar pruebas documentales
            var documentales = await PruebaDocumentalService.GetAllAsync();
            allPruebas.AddRange(documentales.Select(PruebaDto.FromPruebaDocumental));

            // Cargar pruebas testimoniales
            var testimoniales = await PruebaTestimonialService.GetAllAsync();
            allPruebas.AddRange(testimoniales.Select(PruebaDto.FromPruebaTestimonial));

            // Cargar pruebas periciales
            var periciales = await PruebaPericialesService.GetAllAsync();
            allPruebas.AddRange(periciales.Select(PruebaDto.FromPruebaPericial));

            pruebas = allPruebas.OrderByDescending(p => p.FechaPresentacion).ToList();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error al cargar pruebas: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredPruebas = pruebas.Where(p =>
            (string.IsNullOrEmpty(selectedType) || p.TipoPrueba == selectedType) &&
            (string.IsNullOrEmpty(selectedStatus) || p.Estado == selectedStatus) &&
            (string.IsNullOrEmpty(searchDescription) || p.Descripcion.Contains(searchDescription, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    }

    private async Task FilterByType(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private async Task FilterByStatus(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private async Task FilterByDescription(ChangeEventArgs e)
    {
        searchDescription = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private async Task ShowCreateModal(string tipoPrueba)
    {
        currentPrueba = new PruebaDto
        {
            TipoPrueba = tipoPrueba,
            FechaPresentacion = DateTime.Today,
            Estado = "V√°lida",
            EsValida = true
        };
        audienciaIdString = "";
        isEditing = false;
        await JSRuntime.InvokeVoidAsync("var modal = new bootstrap.Modal(document.getElementById('pruebaModal')); modal.show();");
    }

    private async Task EditPrueba(PruebaDto prueba)
    {
        currentPrueba = new PruebaDto
        {
            Id = prueba.Id,
            TipoPrueba = prueba.TipoPrueba,
            Descripcion = prueba.Descripcion,
            FechaPresentacion = prueba.FechaPresentacion,
            Estado = prueba.Estado,
            AudienciaId = prueba.AudienciaId,
            Observaciones = prueba.Observaciones,
            EsValida = prueba.EsValida,
            RutaArchivo = prueba.RutaArchivo,
            TipoDocumento = prueba.TipoDocumento,
            NombreTestigo = prueba.NombreTestigo,
            TipoPericia = prueba.TipoPericia,
            NombrePerito = prueba.NombrePerito
        };
        audienciaIdString = prueba.AudienciaId.ToString();
        isEditing = true;
        await JSRuntime.InvokeVoidAsync("var modal = new bootstrap.Modal(document.getElementById('pruebaModal')); modal.show();");
    }

    private async Task ViewPrueba(PruebaDto prueba)
    {
        viewingPrueba = prueba;
        await JSRuntime.InvokeVoidAsync("var modal = new bootstrap.Modal(document.getElementById('viewPruebaModal')); modal.show();");
    }

    private async Task SavePrueba()
    {
        try
        {
            // Validar y convertir AudienciaId
            if (!Guid.TryParse(audienciaIdString, out var audienciaId))
            {
                NotificationService.ShowError("ID de audiencia inv√°lido");
                return;
            }
            currentPrueba.AudienciaId = audienciaId;
            currentPrueba.EsValida = currentPrueba.Estado == "V√°lida";

            if (isEditing)
            {
                await UpdatePrueba();
                NotificationService.ShowSuccess("Prueba actualizada exitosamente");
            }
            else
            {
                await CreatePrueba();
                NotificationService.ShowSuccess("Prueba creada exitosamente");
            }

            await JSRuntime.InvokeVoidAsync("bootstrap.Modal.getInstance(document.getElementById('pruebaModal')).hide();");
            await LoadPruebas();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error al guardar la prueba: {ex.Message}");
        }
    }

    private async Task CreatePrueba()
    {
        switch (currentPrueba.TipoPrueba)
        {
            case "Documental":
                var documental = PruebaDocumental.Crear(
                    currentPrueba.AudienciaId,
                    currentPrueba.Descripcion,
                    currentPrueba.RutaArchivo ?? ""
                );
                if (currentPrueba.EsValida)
                    documental.MarcarComoVerificada();
                else
                    documental.MarcarComoInvalida(currentPrueba.Observaciones ?? "");
                await PruebaDocumentalService.CreateAsync(documental);
                break;

            case "Testimonial":
                var testimonial = PruebaTestimonial.Crear(
                    currentPrueba.AudienciaId,
                    currentPrueba.Descripcion,
                    Guid.NewGuid(), // ID del testigo - en una implementaci√≥n real esto vendr√≠a de un selector
                    CredibilidadTestigo.Media // Valor por defecto
                );
                if (!currentPrueba.EsValida)
                    testimonial.MarcarComoInvalida(currentPrueba.Observaciones ?? "");
                await PruebaTestimonialService.CreateAsync(testimonial);
                break;            case "Pericial":
                var pericial = PruebaPericial.Crear(
                    currentPrueba.AudienciaId,
                    currentPrueba.Descripcion,
                    Guid.NewGuid(), // ID del perito - en una implementaci√≥n real esto vendr√≠a de un selector
                    currentPrueba.NombrePerito ?? "Perito no especificado",
                    currentPrueba.TipoPericia ?? "General"
                );
                if (!currentPrueba.EsValida)
                    pericial.MarcarComoInvalida(currentPrueba.Observaciones ?? "");
                await PruebaPericialesService.CreateAsync(pericial);
                break;
        }
    }

    private async Task UpdatePrueba()
    {
        // Para la actualizaci√≥n, necesitar√≠amos obtener la entidad existente y actualizarla
        // Por simplicidad, implementaremos esto seg√∫n el tipo de prueba
        switch (currentPrueba.TipoPrueba)
        {
            case "Documental":
                var documental = await PruebaDocumentalService.GetByIdAsync(currentPrueba.Id);
                if (documental != null)
                {
                    // Actualizar propiedades necesarias
                    await PruebaDocumentalService.UpdateAsync(currentPrueba.Id, documental);
                }
                break;

            case "Testimonial":
                var testimonial = await PruebaTestimonialService.GetByIdAsync(currentPrueba.Id);
                if (testimonial != null)
                {
                    await PruebaTestimonialService.UpdateAsync(currentPrueba.Id, testimonial);
                }
                break;

            case "Pericial":
                var pericial = await PruebaPericialesService.GetByIdAsync(currentPrueba.Id);
                if (pericial != null)
                {
                    await PruebaPericialesService.UpdateAsync(currentPrueba.Id, pericial);
                }
                break;
        }
    }

    private async Task DeletePrueba(Guid id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¬øEst√° seguro de que desea eliminar esta prueba?"))
        {
            try
            {
                // Encontrar la prueba para determinar su tipo
                var prueba = pruebas.FirstOrDefault(p => p.Id == id);
                if (prueba != null)
                {
                    switch (prueba.TipoPrueba)
                    {
                        case "Documental":
                            await PruebaDocumentalService.DeleteAsync(id);
                            break;
                        case "Testimonial":
                            await PruebaTestimonialService.DeleteAsync(id);
                            break;
                        case "Pericial":
                            await PruebaPericialesService.DeleteAsync(id);
                            break;
                    }
                    NotificationService.ShowSuccess("Prueba eliminada exitosamente");
                    await LoadPruebas();
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError($"Error al eliminar la prueba: {ex.Message}");
            }
        }
    }

    private string GetPruebaIcon(string tipoPrueba)
    {
        return tipoPrueba switch
        {
            "Documental" => "üìÑ",
            "Testimonial" => "üë•",
            "Pericial" => "üî¨",
            _ => "üìã"
        };
    }

    private string GetStatusBadgeClass(string estado)
    {
        return estado switch
        {
            "V√°lida" => "bg-success",
            "Inv√°lida" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
