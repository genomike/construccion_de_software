@page "/interrogatorios"
@using EtapaDeJuicio.UI.Web.Models
@using EtapaDeJuicio.UI.Web.Services
@using EtapaDeJuicio.Domain.Entities.Pruebas
@inject InterrogatorioService InterrogatorioService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime

<PageTitle>Gesti√≥n de Interrogatorios</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>üé§ Gesti√≥n de Interrogatorios</h1>
                <button class="btn btn-success" @onclick="ShowCreateModal">
                    <span class="oi oi-plus" aria-hidden="true"></span> Nuevo Interrogatorio
                </button>
            </div>
        </div>
    </div>

    @if (loading)
    {
        <div class="text-center">
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p>Cargando interrogatorios...</p>
        </div>
    }    else if (interrogatorios == null || !interrogatorios.Any())
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">No hay interrogatorios registrados</h4>
            <p>No se encontraron interrogatorios en el sistema. ¬°Crea el primer interrogatorio!</p>
            <p><strong>Debug info:</strong> interrogatorios es null: @(interrogatorios == null), cuenta: @(interrogatorios?.Count ?? 0)</p>
        </div>
    }
    else
    {
        <div class="alert alert-success" role="alert">
            <strong>‚úÖ Interrogatorios cargados:</strong> Se encontraron @interrogatorios.Count interrogatorio(s) en el sistema.
        </div>
        <div class="row">
            @foreach (var interrogatorio in interrogatorios)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100">
                        <div class="card-header bg-success text-white">
                            <h5 class="card-title mb-0">@interrogatorio.Tipo</h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text">
                                <strong>üìÖ Fecha:</strong> @interrogatorio.FechaHora.ToString("dd/MM/yyyy HH:mm")<br>
                                <strong>üìù Descripci√≥n:</strong> @interrogatorio.Descripcion<br>
                                <strong>üìä Estado:</strong> <span class="badge @(interrogatorio.EstaCompleto ? "bg-success" : "bg-warning")">@(interrogatorio.EstaCompleto ? "Completado" : "En Proceso")</span>
                            </p>
                            <p class="card-text">
                                <strong>‚ùì Preguntas:</strong> @interrogatorio.Preguntas.Count
                            </p>
                            @if (interrogatorio.FechaFinalizacion.HasValue)
                            {
                                <p class="card-text">
                                    <strong>‚úÖ Finalizado:</strong> @interrogatorio.FechaFinalizacion.Value.ToString("dd/MM/yyyy HH:mm")
                                </p>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="btn-group w-100" role="group">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => EditInterrogatorio(interrogatorio)">
                                    <span class="oi oi-pencil" aria-hidden="true"></span> Editar
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteInterrogatorio(interrogatorio.Id)">
                                    <span class="oi oi-trash" aria-hidden="true"></span> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Modal para Crear/Editar Interrogatorio -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Editar Interrogatorio" : "Nuevo Interrogatorio")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentInterrogatorio" OnValidSubmit="SaveInterrogatorio">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Descripci√≥n</label>
                                <InputText class="form-control" @bind-Value="currentInterrogatorio.Descripcion" placeholder="Descripci√≥n del interrogatorio" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Tipo de Interrogatorio</label>
                                <InputSelect class="form-select" @bind-Value="currentInterrogatorio.Tipo">
                                    <option value="">Seleccionar tipo...</option>
                                    <option value="Directo">Directo</option>
                                    <option value="Contrainterrogatorio">Contrainterrogatorio</option>
                                    <option value="Redirect">Redirect</option>
                                    <option value="Recross">Recross</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Fecha y Hora</label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="currentInterrogatorio.FechaHora" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Estado</label>
                                <InputCheckbox @bind-Value="currentInterrogatorio.EstaCompleto" class="form-check-input" />
                                <label class="form-check-label ms-2">¬øEst√° completado?</label>
                            </div>
                        </div>

                        <!-- Secci√≥n de Preguntas -->
                        <div class="mb-3">
                            <label class="form-label">Preguntas</label>
                            <div class="border rounded p-3">
                                @if (currentInterrogatorio.Preguntas.Any())
                                {
                                    @foreach (var pregunta in currentInterrogatorio.Preguntas)
                                    {
                                        <div class="mb-2 p-2 border rounded">
                                            <strong>P:</strong> @pregunta.Texto
                                            @if (!string.IsNullOrEmpty(pregunta.Respuesta))
                                            {
                                                <br><strong>R:</strong> @pregunta.Respuesta
                                            }
                                            <button type="button" class="btn btn-sm btn-outline-danger float-end" 
                                                    @onclick="() => RemovePregunta(pregunta)">
                                                <span class="oi oi-trash"></span>
                                            </button>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted">No hay preguntas agregadas.</p>
                                }
                                
                                <div class="mt-3">
                                    <div class="input-group">
                                        <input type="text" class="form-control" @bind="nuevaPregunta" placeholder="Nueva pregunta..." />
                                        <button type="button" class="btn btn-outline-success" @onclick="AddPregunta">
                                            <span class="oi oi-plus"></span> Agregar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                            <button type="submit" class="btn btn-success">
                                <span class="oi oi-check" aria-hidden="true"></span> @(isEditing ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<InterrogatorioDto> interrogatorios = new();
    private bool loading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private InterrogatorioDto currentInterrogatorio = new();
    private string nuevaPregunta = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadInterrogatorios();
    }    private async Task LoadInterrogatorios()
    {
        Console.WriteLine("=== STARTING LoadInterrogatorios() ===");
        loading = true;
        try
        {
            Console.WriteLine("Calling InterrogatorioService.GetAllAsync()...");
            var domainInterrogatorios = await InterrogatorioService.GetAllAsync();
            Console.WriteLine($"Received {domainInterrogatorios.Count} domain interrogatorios from service");
            
            if (domainInterrogatorios.Any())
            {
                var primero = domainInterrogatorios.First();
                Console.WriteLine($"Primer interrogatorio - ID: {primero.Id}, Descripcion: {primero.Descripcion}");
            }
            else
            {
                Console.WriteLine("*** NO INTERROGATORIOS RETURNED FROM SERVICE ***");
            }
            
            interrogatorios = domainInterrogatorios.Select(i => new InterrogatorioDto(i)).ToList();
            Console.WriteLine($"=== CONVERSION COMPLETE: {interrogatorios.Count} DTOs created ===");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"*** ERROR IN LoadInterrogatorios: {ex.Message} ***");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            NotificationService.ShowError($"Error al cargar interrogatorios: {ex.Message}");
        }
        finally
        {
            loading = false;
            Console.WriteLine("=== LoadInterrogatorios() FINISHED ===");
        }
    }

    private void ShowCreateModal()
    {
        currentInterrogatorio = new InterrogatorioDto
        {
            Id = Guid.NewGuid(),
            FechaHora = DateTime.Now,
            EstaCompleto = false
        };
        isEditing = false;
        showModal = true;
    }

    private void EditInterrogatorio(InterrogatorioDto interrogatorio)
    {
        currentInterrogatorio = new InterrogatorioDto
        {
            Id = interrogatorio.Id,
            Descripcion = interrogatorio.Descripcion,
            FechaHora = interrogatorio.FechaHora,
            Tipo = interrogatorio.Tipo,
            EstaCompleto = interrogatorio.EstaCompleto,
            FechaFinalizacion = interrogatorio.FechaFinalizacion,
            Preguntas = interrogatorio.Preguntas.Select(p => new PreguntaDto 
            { 
                Id = p.Id, 
                Texto = p.Texto, 
                Respuesta = p.Respuesta, 
                FechaHora = p.FechaHora 
            }).ToList()
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentInterrogatorio = new InterrogatorioDto();
        nuevaPregunta = string.Empty;
    }

    private void AddPregunta()
    {
        if (!string.IsNullOrWhiteSpace(nuevaPregunta))
        {
            currentInterrogatorio.Preguntas.Add(new PreguntaDto
            {
                Id = Guid.NewGuid(),
                Texto = nuevaPregunta,
                FechaHora = DateTime.Now
            });
            nuevaPregunta = string.Empty;
        }
    }

    private void RemovePregunta(PreguntaDto pregunta)
    {
        currentInterrogatorio.Preguntas.Remove(pregunta);
    }

    private async Task SaveInterrogatorio()
    {
        try
        {
            bool success;
            var domainInterrogatorio = currentInterrogatorio.ToEntity();
            
            if (isEditing)
            {
                success = await InterrogatorioService.UpdateAsync(currentInterrogatorio.Id, domainInterrogatorio);
            }
            else
            {
                success = await InterrogatorioService.CreateAsync(domainInterrogatorio);
            }

            if (success)
            {
                NotificationService.ShowSuccess(isEditing ? "Interrogatorio actualizado exitosamente" : "Interrogatorio creado exitosamente");
                CloseModal();
                await LoadInterrogatorios();
            }
            else
            {
                NotificationService.ShowError("Error al guardar el interrogatorio");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error: {ex.Message}");
        }
    }

    private async Task DeleteInterrogatorio(Guid id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "¬øEst√°s seguro de que deseas eliminar este interrogatorio?");
        if (confirm)
        {
            try
            {
                var success = await InterrogatorioService.DeleteAsync(id);
                if (success)
                {
                    NotificationService.ShowSuccess("Interrogatorio eliminado exitosamente");
                    await LoadInterrogatorios();
                }
                else
                {
                    NotificationService.ShowError("Error al eliminar el interrogatorio");
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError($"Error: {ex.Message}");
            }
        }
    }
}
